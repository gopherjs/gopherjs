[run]
timeout = "1m"

[output]
format = "colored-line-number"

[linters]
disable-all = true
enable = [
    # Detect unused code.
    "unused",   # Detects unused code
    "deadcode", # Deprecated, but catches some things unused doesn't, so it's kept for now.
    "unparam",  # Detect unused function parameters that can be removed

    # Code style/formatting
    "asciicheck", # check that your code does not contain non-ASCII identifiers
    "bidichk",    # Checks for dangerous unicode character sequences
    #"decorder",   # check declaration order and count of types, constants, variables and functions # Super annoying
    #"dogsled",    # Checks assignments with too many blank identifiers (e.g. x, _, _, _, := f()) # dubious value
    "dupword",    # checks for duplicate words in the source code
    "errname",    # Ensure error constants and variables are properly named
    "forbidigo",  # Forbids the use of certain identifiers. See [linters-settings.forbidigo] below
    #"funlen",     # detection of long functions # duplicate of revive
    "gci",        # Controls import order and makes it always deterministic
    #"ginkgolinter", # enforces standards of using ginkgo and gomega # we don't use ginkgo
    # "goconst",    # Finds repeated strings that could be replaced by a constant # Dupe of revive
    # "gocyclo",    # checks the cyclomatic complexity of functions # Dupe of revive
    # "gofmt",      # standard formatting # gofumpt is better
    "gofumpt",    # gofumpt is a stricter version of gofmt
    # "goheader",   # Checks is file header matches to pattern # duplicate of revive
    # "goimports",  # Ensure imports are properly ordered # Duplicate of gci
    #"gocognit",   # checks the cognitive complexity of functions # Dupe of revive, etc
    # "gomnd",      # detect magic numbers # dupe of revive
    # "gomoddirectives", # Manage the use of 'replace', 'retract', and 'excludes' directives in go.mod # Not needed for now
    # "gomodguard", # Allow and block list linter for direct Go module dependencies # Dupe of revive
    # "goprintffuncname", # Checks that printf-like functions are named with `f` at the end # dubious value
    "grouper",    # analyze expression groups
    # "importas",   # Enforces consistent import aliases # Probably useful in future
    # "interfacebloat", # checks the number of methods inside an interface # maybe later
    # "ireturn",    # Accept Interfaces, Return Concrete Types # too opinionated
    # "lll",        # long lines # dupe of revive
    # "maintidx",   # measures the maintainability index of each function # Dupe of revive, gocyclo, etc
    "misspell",   # Catch misspelled words
    # "nakedret",   # Find naked returns # dupe of revive
    "nestif",     # Reports deeply-nested if statements
    # "nlreturn",   # checks for a new line before return and branch statements to increase code clarity # ugly
    # "nolintlint",   # Reports ill-formed or insufficient nolint directives # duplicate of gocritic
    # "nonamedreturns", # Reports all named returns # stupid
    # "varnamelen",     # checks that the length of a variable's name matches its scope
    # "whitespace",     # detection of leading and trailing whitespace # dupe of gofumpt
    # "wsl",            # Forces you to use empty lines # largely dupe of gofumpt

    # Code complexity linters
    "unconvert", # Unnecessary type conversions
    "gosimple",  # Various code simplifications

    # Likely bugs
    "bodyclose",     # Ensures HTTP request bodies are closed
    "containedctx",  # detects struct contained context.Context field
    # "contextcheck",  # check whether the function uses a non-inherited context # buggy too many false positives
    "durationcheck", # check for two durations multiplied together
    "errcheck",      # Unchecked errors
    "errchkjson",    # Failure to check JSON-related errors
    "errorlint",     # Detect error-wrapping related bugs
    #"execinquery",   # query string checker in Query function which reads your Go src files and warning it finds # duplicate of gocritic's sqlQuery
    "exhaustive",    # check exhaustiveness of enum switch statements
    #"exhaustruct",   # Checks if all structure fields are initialized # dubious value
    "exportloopref", # Detects improper use of pointers in loops
    #"forcetypeassert", # finds forced type assertions # Duplicate of errcheck and/or revive
    # "goerr113",      # check the errors handling expressions # Duplicate of errorlint
    "gocritic",      # See [linters-settings.gocritic] below for details
    "gocheckcompilerdirectives", # Checks that go compiler directive comments (//go:) are valid # likely dupe of gofumpt
    "gochecknoglobals", # Check that no global variables exist
    "gochecknoinits",   # Checks that no init functions are present
    "gosec",         # A number of security-related checks
    "ineffassign",   # Variable assignments that are never used
    # "loggercheck",   # Checks key value pairs for common logger libraries # We don't need this
    "makezero",      # Detects improper creation of slices with non-zero length
    # crashes # "musttag",       # enforce field tags in (un)marshaled structs
    "nilerr",        # Finds the code that returns nil even if it checks that the error is not nil # likely dupe of revive, TBD
    "nilnil",        # Checks that there is no simultaneous return of `nil` error and an invalid value # possible dupe of revive, TBD
    "noctx",         # Detects HTTP requests without context
    # "nosprintfhostport", # Checks for misuse of Sprintf to construct a host with port in a URL # not very intelligent
    "reassign",      # Checks that package variables are not reassigned
    "revive",        # See [linters-settings.revive] below for details
    "rowserrcheck",  # Failure to check SQL Errors
    "sqlclosecheck", # Ensure SQL queries are properly closed
    "staticcheck",   # Various bug and other style checks
    # "stylecheck",    # replacement for golint # dupe of revive
    # "tagliatelle",   # Checks the struct tags # likely dupe of revive etc
    #"typecheck",     # Does type checking # Redundant with compiler
    # "wastedassign",  # finds wasted assignment statements # likely dupe of ineffassign, etc

    # Testing-related linters
    # "paralleltest",     # detects missing usage of t.Parallel() method in tests. # Duplicate of tparallel
    "tenv",             # Catches use of os.Setenv in tests
    "testableexamples", # checks if examples are testable
    # "testpackage",      # makes you use a separate _test package # negative value
    "thelper",          # Catches failure to call t.Helper() in testing helper funcs
    "tparallel",        # Catches failure to call t.Parallel() in tests

    # Performance related linters
    "prealloc", # Detects when slices can be pre-allocated to reduce memory pressure

    # Misc linters
    #"asasalint",     # Avoid variadic any arguments
    #"cyclop",        # checks function and package cyclomatic complexity # duplicated by revive
    "govet",         # The default `go vet` tool from the Go toolchain
    "usestdlibvars", # Instructs you to use stdlib vars and constants where possible
    "dupl",          # Detects duplicate code blocks
    # "depguard",      # Allows blacklisting certain imports. See [[linters-settings.depguard.packages-with-error-message]] below
    # "predeclared",   # find code that shadows predeclared identifiers # dupe of revive, gocritic
    "promlinter",    # Check Prometheus metrics naming
    # "wrapcheck",      # Checks that errors returned from external packages are wrapped
]

[issues]
exclude-use-default = false
new-from-rev = "997bc9966b10f87ac0384e916d3ea34af51aa895"

[linters-settings.gosec]
excludes = [
  "G104", # Duplicate of errcheck
  "G307", # Duplicate of errcheck
]

[linters-settings.gocritic]
enabled-checks = [
  # To see all available checks, run `GL_DEBUG=gocritic golangci-lint run`

  ## Unused code
  "commentedOutCode",   # Detects commented-out code inside function bodies
  "commentedOutImport", # Detects commented-out imports
  "unlabelStmt",        # Detects redundant statement labels

  ## Code formatting & style
  "assignOp",                 # Detects assignments that can be simplified by using assignment operators
  #"builtinShadowDecl",        # Detects top-level declarations that shadow the predeclared identifiers
  "captLocal",                # Detects capitalized names for local variables
  "codegenComment",           # Detects malformed ‘code generated’ file comments
  #"commentFormatting",        # Detects comments with non-idiomatic formatting # functionality provided by gofumpt
  "defaultCaseOrder",         # Detects when default case in switch isn’t on 1st or last position
  "deprecatedComment",        # Detects malformed ‘deprecated’ doc-comments
  "docStub",                  # Detects comments that silence go lint complaints about doc-comment
  "dupImport",                # Detects multiple imports of the same package under different aliases
  "elseif",                   # Detects else with nested if statement that can be replaced with else-if
  "emptyDecl",                # Detects suspicious empty declarations blocks
  "emptyStringTest",          # Detects empty string checks that can be written more idiomatically
  "exposedSyncMutex",         # Detects exposed methods from sync.Mutex and sync.RWMutex
  #"filepathJoin",             # Detects problems in filepath.Join() function calls
  "hexLiteral",               # Detects hex literals that have mixed case letter digits
  #"httpNoBody",               # Detects nil usages in http.NewRequest calls, suggesting http.NoBody as an alternative
  "ifElseChain",              # Detects repeated if-else statements and suggests to replace them with switch statement
  #"octalLiteral",             # Detects old-style octal literals # redundant with gofmt/gofumpt
  "preferFilepathJoin",       # Detects concatenation with os.PathSeparator which can be replaced with filepath.Join
  "ptrToRefParam",            # Detects input and output parameters that have a type of pointer to referential type
  #"sprintfQuotedString",      # Detects “%s” formatting directives that can be replaced with %q
  "timeExprSimplify",         # Detects manual conversion to milli- or microseconds
  #"todoCommentWithoutDetail", # Detects TODO comments without detail/assignee
  #"tooManyResultsChecker",    # Detects function with too many results // duplicate of revive's function-result-limit
  "typeAssertChain",          # Detects repeated type assertions and suggests to replace them with type switch statement.
  "typeDefFirst",             # Detects method declarations preceding the type definition itself
  #"unnamedResult",            # Detects unnamed results that may benefit from names, @unnamedResult.checkExported` whether to check exported functions (default false)
  "whyNoLint",                # Ensures that //nolint comments include an explanation // replaces nolintlint
  "yodaStyleExpr",            # Detects Yoda style expressions and suggests to replace them

  ## Code complexity
  "appendCombine",        # Detects append chains to the same slice that can be done in a single append call
  "boolExprSimplify",     # Detects bool expressions that can be simplified.
  "deferUnlambda",        # Detects deferred function literals that can be simplified
  "sloppyTypeAssert",     # Detects redundant type assertions
  #"syncMapLoadAndDelete", # Detects sync.Map load+delete operations that can be replaced with LoadAndDelete
  "unnecessaryDefer",     # Detects redundantly deferred calls
  "emptyFallthrough",     # Detects fallthrough that can be avoided by using multi case values
  "methodExprCall",       # Detects method expression call that can be replaced with a method call
  "nestingReduce",        # Finds where nesting level could be reduced
  "newDeref",             # Detects immediate dereferencing of new expressions
  "paramTypeCombine",     # Detects if function parameters could be combined by type and suggest the way to do it
  "preferFprint",         # Detects fmt.Sprint(f/ln) calls which can be replaced with fmt.Fprint(f/ln)
  "redundantSprint",      # Detects redundant fmt.Sprint calls
  "regexpSimplify",       # Detects regexp patterns that can be simplified
  "singleCaseSwitch",     # Detects switch statements that could be better written as if statement
  "sloppyLen",            # Detects usage of len when result is obvious or doesn’t make sense
  "stringConcatSimplify", # Detects string concat operations that can be simplified
  "stringsCompare",       # Detects strings.Compare usage
  "switchTrue",           # Detects switch-over-bool statements that use explicit true tag value
  "timeCmpSimplify",      # Detects Before/After call of time.Time that can be simplified
  "typeSwitchVar",        # Detects type switches that can benefit from type guard clause with variable
  "typeUnparen",          # Detects unneded parenthesis inside type expressions and suggests to remove them
  "underef",              # Detects dereference expressions that can be omitted
  "unlambda",             # Detects function literals that can be simplified
  "unnecessaryBlock",     # Detects unnecessary braced statement blocks
  "unslice",              # Detects slice expressions that can be simplified to sliced expression itself
  "valSwap",              # Detects value swapping code that are not using parallel assignment
  "wrapperFunc",          # Detects function calls that can be replaced with convenience wrappers

  ## Likely bugs
  "appendAssign",          # Detects suspicious append result assignments
  "argOrder",              # Detects suspicious arguments order
  "badCall",               # Detects suspicious function calls
  "badCond",               # Detects suspicious condition expressions
  "badLock",               # Detects suspicious mutex lock/unlock operations
  "badRegexp",             # Detects suspicious regexp patterns
  "badSorting",            # Detects bad usage of sort package
  "caseOrder",             # Detects erroneous case order inside switch statements
  "deferInLoop",           # Detects loops inside functions that use defer
  "dupArg",                # Detects suspicious duplicated arguments
  "dupBranchBody",         # Detects duplicated branch bodies inside conditional statements
  "dupCase",               # Detects duplicated case clauses inside switch or select statements
  "dupSubExpr",            # Detects suspicious duplicated sub-expressions
  "dynamicFmtString",      # Detects suspicious formatting strings usage
  "evalOrder",             # Detects unwanted dependencies on the evaluation order
  "exitAfterDefer",        # Detects calls to exit/fatal inside functions that use defer
  "externalErrorReassign", # Detects suspicious reassigment of error from another package
  "flagDeref",             # Detects immediate dereferencing of flag package pointers
  "flagName",              # Detects suspicious flag names
  "initClause",            # Detects non-assignment statements inside if/switch init clause
  "mapKey",                # Detects suspicious map literal keys
  "nilValReturn",          # Detects return statements those results evaluate to nil
  "offBy1",                # Detects various off-by-one kind of errors
  "regexpMust",            # Detects regexp.Compile* that can be replaced with regexp.MustCompile*
  "regexpPattern",         # Detects suspicious regexp patterns
  "returnAfterHttpError",  # Detects suspicious http.Error call without following return
  #"sloppyReassign",        # Detects suspicious/confusing re-assignments
  "sortSlice",             # Detects suspicious sort.Slice calls
  "sqlQuery",              # Detects issue in Query() and Exec() calls
  "truncateCmp",           # Detects potential truncation issues when comparing ints of different sizes
  "uncheckedInlineErr",    # Detects unchecked errors in if statements
  "weakCond",              # Detects conditions that are unsafe due to not being exhaustive.

  ## Performance
  "equalFold",          # Detects unoptimal strings/bytes case-insensitive comparison
  "hugeParam",          # Detects params that incur excessive amount of copying
  "indexAlloc",         # Detects strings.Index calls that may cause unwanted allocs
  "preferDecodeRune",   # Detects expressions like []rune(s)[0] that may cause unwanted rune slice allocation
  "preferStringWriter", # Detects w.Write or io.WriteString calls which can be replaced with w.WriteString
  "preferWriteByte",    # Detects WriteRune calls with rune literal argument that is single byte and reports to use WriteByte instead
  "rangeExprCopy",      # Detects expensive copies of for loop range expressions
  "rangeValCopy",       # Detects loops that copy big objects during each iteration
  "sliceClear",         # Detects slice clear loops, suggests an idiom that is recognized by the Go compiler
  "stringXbytes",       # Detects redundant conversions between string and []byte

  ## Testing
  "sloppyTestFuncName", # Detects unsupported test and benchmark funcs

  ## Other
  #"builtinShadow", # Detects when predeclared identifiers are shadowed in assignments // Duplicated by usestdlibvars
  #"ruleguard",    # Runs user-defined rules using ruleguard linter, see See https://github.com/quasilyte/go-ruleguard
  #"importShadow", # Detects when imported package names shadowed in the assignments // Duplicated by revive
]

[linters-settings.prealloc]
for-loops = true

[linters-settings.nolintlint]
allow-unused = false
allow-leading-space = false
require-explanation = true
require-specific = true

[linters-settings.errcheck]
check-type-assertions = true

[linters-settings.govet]
check-shadowing = true
enable-all = true
disable = ["fieldalignment"]

[linters-settings.depguard.rules.main]
# files = [ "!**/*_a _file.go" ]
# allow = [ "$gostd", "github.com/Unity-Technologies/connect-backend" ]

  [[linters-settings.depguard.rules.main.deny]]
  # pkg = "github.com/sirupsen/logrus"
  # desc = "not allowed"

  [[linters-settings.depguard.rules.main.deny]]
  # pkg = "github.com/pkg/errors"
  # desc = "Should be replaced by standard lib errors package"

[linters-settings.forbidigo]
forbid = []
exclude_godoc_examples = false

[linters-settings.grouper]
import-require-single-import = true

[linters-settings.revive]
max-open-files = 2_048
ignore-generated-header = true
severity = "error"
# Enable all revive rules, except those we disable explicitly below.
# The full list of available rules can be found at
# https://github.com/mgechev/revive/blob/master/RULES_DESCRIPTIONS.md
enable-all-rules = true
confidence = 0.1

  # Suggests using constant for magic numbers and string literals.
  [[linters-settings.revive.rules]]
  name = "add-constant"
  disabled = false

    [[linters-settings.revive.rules.arguments]]
    maxLitCount = "3"
    allowStrs = '"","_id","tagId","status"'
    allowInts = "0,1,2"
    allowFloats = "0.0,0.,1.0,1.,2.0,2."

  # Warns when a function receives more parameters than the maximum set by the rule's configuration. Enforcing a maximum number of parameters helps to keep the code readable and maintainable.
  [[linters-settings.revive.rules]]
  name = "argument-limit"
  disabled = false
  arguments = [ 10 ]

  # Check for commonly mistaken usages of the sync/atomic package.
  [[linters-settings.revive.rules]]
  name = "atomic"
  disabled = false

  # Checks given banned characters in identifiers(func, var, const). Comments are not checked.
  [[linters-settings.revive.rules]]
  name = "banned-characters"
  disabled = true

  # Warns on bare (a.k.a. naked) returns.
  [[linters-settings.revive.rules]]
  name = "bare-return"
  disabled = false

  # Blank import should be only in a main or test package, or have a comment justifying it.
  [[linters-settings.revive.rules]]
  name = "blank-imports"
  disabled = false

  # Using Boolean literals (true, false) in logic expressions may make the code less readable. This rule suggests removing Boolean literals from logic expressions.
  [[linters-settings.revive.rules]]
  name = "bool-literal-in-expr"
  disabled = false

  # Explicitly invoking the garbage collector is, except for specific uses in benchmarking, very dubious.
  [[linters-settings.revive.rules]]
  name = "call-to-gc"
  disabled = false

  # Cognitive complexity is a measure of how hard code is to understand. While cyclomatic complexity is good to measure "testability" of the code, cognitive complexity aims to provide a more precise measure of the difficulty of understanding the code. Enforcing a maximum complexity per function helps to keep code readable and maintainable.
  [[linters-settings.revive.rules]]
  name = "cognitive-complexity"
  disabled = true

  # Spots comments with improper spacing.
  [[linters-settings.revive.rules]]
  name = "comment-spacings"
  disabled = true # gofumpt should already handle this for us
  arguments = [ "mypragma", "otherpragma" ]

  # Methods or fields of struct that have names different only by capitalization could be confusing.
  [[linters-settings.revive.rules]]
  name = "confusing-naming"
  disabled = true

  # Function or methods that return multiple, no named, values of the same type could induce error.
  [[linters-settings.revive.rules]]
  name = "confusing-results"
  disabled = false

  # The rule spots logical expressions that evaluate always to the same value.
  [[linters-settings.revive.rules]]
  name = "constant-logical-expr"
  disabled = false

  # By convention, context.Context should be the first parameter of a function. This rule spots function declarations that do not follow the convention.
  [[linters-settings.revive.rules]]
  name = "context-as-argument"
  disabled = false

  # Basic types should not be used as a key in context.WithValue.
  [[linters-settings.revive.rules]]
  name = "context-keys-type"
  disabled = false

  # Cyclomatic complexity is a measure of code complexity. Enforcing a maximum complexity per function helps to keep code readable and maintainable.
  [[linters-settings.revive.rules]]
  name = "cyclomatic"
  disabled = false
  arguments = [10]

  # This rule spots potential dataraces caused by go-routines capturing (by-reference) particular identifiers of the function from which go-routines are created. The rule is able to spot two of such cases: go-routines capturing named return values, and capturing for-range values.
  [[linters-settings.revive.rules]]
  name = "datarace"
  disabled = false

  # Packages exposing functions that can stop program execution by exiting are hard to reuse. This rule looks for program exits in functions other than main() or init().
  [[linters-settings.revive.rules]]
  name = "deep-exit"
  disabled = false

  # This rule warns on some common mistakes when using defer statement.
  [[linters-settings.revive.rules]]
  name = "defer"
  disabled = false

  # Importing with . makes the programs much harder to understand because it is unclear whether names belong to the current package or to an imported package.
  [[linters-settings.revive.rules]]
  name = "dot-imports"
  disabled = false

  # It is possible to unintentionally import the same package twice. This rule looks for packages that are imported two or more times.
  [[linters-settings.revive.rules]]
  name = "duplicated-imports"
  disabled = true # Duplicate of gocritic's dupImport

  # In Go it is idiomatic to minimize nesting statements, a typical example is to avoid if-then-else constructions.
  [[linters-settings.revive.rules]]
  name = "early-return"
  disabled = false

  # Empty blocks make code less readable and could be a symptom of a bug or unfinished refactoring.
  [[linters-settings.revive.rules]]
  name = "empty-block"
  disabled = false

  # Sometimes gofmt is not enough to enforce a common formatting of a code-base; this rule warns when there are heading or trailing newlines in code blocks.
  [[linters-settings.revive.rules]]
  name = "empty-lines"
  disabled = false

  # By convention, for the sake of readability, variables of type error must be named with the prefix err.
  [[linters-settings.revive.rules]]
  name = "error-naming"
  disabled = false

  # By convention, for the sake of readability, the errors should be last in the list of returned values by a function.
  [[linters-settings.revive.rules]]
  name = "error-return"
  disabled = false

  # By convention, for better readability, error messages should not be capitalized or end with punctuation or a newline.
  [[linters-settings.revive.rules]]
  name = "error-strings"
  disabled = false

  # It is possible to get a simpler program by replacing errors.New(fmt.Sprintf()) with fmt.Errorf(). This rule spots that kind of simplification opportunities.
  [[linters-settings.revive.rules]]
  name = "errorf"
  disabled = false

  # Exported function and methods should have comments. This warns on undocumented exported functions and methods.
  [[linters-settings.revive.rules]]
  name = "exported"
  disabled = false
  arguments = [ "sayRepetitiveInsteadOfStutters" ]

  #  This rule helps to enforce a common header for all source files in a project by spotting those files that do not have the specified header.
  [[linters-settings.revive.rules]]
  name = "file-header"
  disabled = true # No standard file header for this project

  # If a function controls the flow of another by passing it information on what to do, both functions are said to be control-coupled. Coupling among functions must be minimized for better maintainability of the code. This rule warns on boolean parameters that create a control coupling.
  [[linters-settings.revive.rules]]
  name = "flag-parameter"
  disabled = false

  # Functions returning too many results can be hard to understand/use.
  [[linters-settings.revive.rules]]
  name = "function-result-limit"
  disabled = false
  arguments = [3]

  # Functions too long (with many statements and/or lines) can be hard to understand.
  [[linters-settings.revive.rules]]
  name = "function-length"
  disabled = false
  arguments = [25, 0]

  # Typically, functions with names prefixed with Get are supposed to return a value.
  [[linters-settings.revive.rules]]
  name = "get-return"
  disabled = false

  # an if-then-else conditional with identical implementations in both branches is an error.
  [[linters-settings.revive.rules]]
  name = "identical-branches"
  disabled = false

  # Checking if an error is nil to just after return the error or nil is redundant.
  [[linters-settings.revive.rules]]
  name = "if-return"
  disabled = false

  # By convention, for better readability, incrementing an integer variable by 1 is recommended to be done using the ++ operator. This rule spots expressions like i += 1 and i -= 1 and proposes to change them into i++ and i--.
  [[linters-settings.revive.rules]]
  name = "increment-decrement"
  disabled = false

  # To improve the readability of code, it is recommended to reduce the indentation as much as possible. This rule highlights redundant else-blocks that can be eliminated from the code.
  [[linters-settings.revive.rules]]
  name = "indent-error-flow"
  disabled = false

  # Warns when importing black-listed packages.
  [[linters-settings.revive.rules]]
  name = "imports-blacklist"
  disabled = false
  arguments = [
    # Add black-listed imports here
  ]

  # In Go it is possible to declare identifiers (packages, structs, interfaces, parameters, receivers, variables, constants...) that conflict with the name of an imported package. This rule spots identifiers that shadow an import.
  [[linters-settings.revive.rules]]
  name = "import-shadowing"
  disabled = false

  # Warns in the presence of code lines longer than a configured maximum.
  [[linters-settings.revive.rules]]
  name = "line-length-limit"
  disabled = false
  arguments = [150]

  # Packages declaring too many public structs can be hard to understand/use, and could be a symptom of bad design.
  [[linters-settings.revive.rules]]
  name = "max-public-structs"
  disabled = true # Silly rule, IMO

  # A function that modifies its parameters can be hard to understand. It can also be misleading if the arguments are passed by value by the caller. This rule warns when a function modifies one or more of its parameters.
  [[linters-settings.revive.rules]]
  name = "modifies-parameter"
  disabled = false # This might be too annoying, let's see

  # A method that modifies its receiver value can have undesired behavior. The modification can be also the root of a bug because the actual value receiver could be a copy of that used at the calling site. This rule warns when a method modifies its receiver.
  [[linters-settings.revive.rules]]
  name = "modifies-value-receiver"
  disabled = false

  # Packages declaring structs that contain other inline struct definitions can be hard to understand/read for other developers.
  [[linters-settings.revive.rules]]
  name = "nested-structs"
  disabled = false

  # Conditional expressions can be written to take advantage of short circuit evaluation and speed up its average evaluation time by forcing the evaluation of less time-consuming terms before more costly ones. This rule spots logical expressions where the order of evaluation of terms seems non optimal. Please notice that confidence of this rule is low and is up to the user to decide if the suggested rewrite of the expression keeps the semantics of the original one.
  [[linters-settings.revive.rules]]
  name = "optimize-operands-order"
  disabled = true # too many wrong suggestions

  # Packages should have comments. This rule warns on undocumented packages and when packages comments are detached to the package keyword.
  [[linters-settings.revive.rules]]
  name = "package-comments"
  disabled = true # Buggy, complains about every file

  # This rule suggests a shorter way of writing ranges that do not use the second value.
  [[linters-settings.revive.rules]]
  name = "range"
  disabled = false

  # Range variables in a loop are reused at each iteration; therefore a goroutine created in a loop will point to the range variable with from the upper scope. This way, the goroutine could use the variable with an undesired value. This rule warns when a range value (or index) is used inside a closure.
  [[linters-settings.revive.rules]]
  name = "range-val-in-closure"
  disabled = false

  # Range variables in a loop are reused at each iteration. This rule warns when assigning the address of the variable, passing the address to append() or using it in a map.
  [[linters-settings.revive.rules]]
  name = "range-val-address"
  disabled = false

  # By convention, receiver names in a method should reflect their identity. For example, if the receiver is of type Parts, p is an adequate name for it. Contrary to other languages, it is not idiomatic to name receivers as this or self.
  [[linters-settings.revive.rules]]
  name = "receiver-naming"
  disabled = false

  # Constant names like false, true, nil, function names like append, make, and basic type names like bool, and byte are not reserved words of the language; therefore the can be redefined. Even if possible, redefining these built in names can lead to bugs very difficult to detect.
  [[linters-settings.revive.rules]]
  name = "redefines-builtin-id"
  disabled = false

  # explicit type conversion string(i) where i has an integer type other than rune might behave not as expected by the developer (e.g. string(42) is not "42"). This rule spot that kind of suspicious conversions.
  [[linters-settings.revive.rules]]
  name = "string-of-int"
  disabled = false

  # This rule allows you to configure a list of regular expressions that string literals in certain function calls are checked against. This is geared towards user facing applications where string literals are often used for messages that will be presented to users, so it may be desirable to enforce consistent formatting.
  [[linters-settings.revive.rules]]
  name = "string-format"
  disabled = true # Probably worth configuring this later
  # arguments = [ ... ]

  # Struct tags are not checked at compile time. This rule, checks and warns if it finds errors in common struct tags types like: asn1, default, json, protobuf, xml, yaml.
  [[linters-settings.revive.rules]]
  name = "struct-tag"
  disabled = false

  # To improve the readability of code, it is recommended to reduce the indentation as much as possible. This rule highlights redundant else-blocks that can be eliminated from the code.
  [[linters-settings.revive.rules]]
  name = "superfluous-else"
  disabled = false

  # his rule warns when using == and != for equality check time.Time and suggest to time.time.Equal method.
  [[linters-settings.revive.rules]]
  name = "time-equal"
  disabled = false

  # Using unit-specific suffix like "Secs", "Mins", ... when naming variables of type time.Duration can be misleading, this rule highlights those cases.
  [[linters-settings.revive.rules]]
  name = "time-naming"
  disabled = false

  # This rule warns when initialism, variable or package naming conventions are not followed.
  [[linters-settings.revive.rules]]
  name = "var-naming"
  disabled = false

  # This rule proposes simplifications of variable declarations.
  [[linters-settings.revive.rules]]
  name = "var-declaration"
  disabled = false

  # Unconditional recursive calls will produce infinite recursion, thus program stack overflow. This rule detects and warns about unconditional (direct) recursive calls.
  [[linters-settings.revive.rules]]
  name = "unconditional-recursion"
  disabled = false

  # This rule warns on wrongly named un-exported symbols, i.e. un-exported symbols whose name start with a capital letter.
  [[linters-settings.revive.rules]]
  name = "unexported-naming"
  disabled = false

  # This rule warns when an exported function or method returns a value of an un-exported type.
  [[linters-settings.revive.rules]]
  name = "unexported-return"
  disabled = false

  # This rule warns when errors returned by a function are not explicitly handled on the caller side.
  [[linters-settings.revive.rules]]
  name = "unhandled-error"
  disabled = true # duplicate of errcheck

  # This rule suggests to remove redundant statements like a break at the end of a case block, for improving the code's readability.
  [[linters-settings.revive.rules]]
  name = "unnecessary-stmt"
  disabled = false

  # This rule spots and proposes to remove unreachable code.
  [[linters-settings.revive.rules]]
  name = "unreachable-code"
  disabled = false

  # This rule warns on unused parameters. Functions or methods with unused parameters can be a symptom of an unfinished refactoring or a bug.
  [[linters-settings.revive.rules]]
  name = "unused-parameter"
  disabled = false

  # This rule warns on unused method receivers. Methods with unused receivers can be a symptom of an unfinished refactoring or a bug.
  [[linters-settings.revive.rules]]
  name = "unused-receiver"
  disabled = false

  #  Since GO 1.18, interface{} has an alias: any. This rule proposes to replace instances of interface{} with any.
  [[linters-settings.revive.rules]]
  name = "use-any"
  disabled = false

  # This rule warns on useless break statements in case clauses of switch and select statements.
  [[linters-settings.revive.rules]]
  name = "useless-break"
  disabled = false

  # Function parameters that are passed by value, are in fact a copy of the original argument. Passing a copy of a sync.WaitGroup is usually not what the developer wants to do. This rule warns when a sync.WaitGroup expected as a by-value parameter in a function or method.
  [[linters-settings.revive.rules]]
  name = "waitgroup-by-value"
  disabled = false

[linters-settings.usestdlibvars]
http-method = true
http-status-code = true
time-weekday = true
time-month = true
time-layout = true
crypto-hash = true
default-rpc-path = true

# The ../server/agent/Request.End() method closes the body before returning,
# so skip false positives from that.
[[issues.exclude-rules]]
source = "(\\.|\\t)End\\("
text = "response body must be closed"
linters = ["bodyclose"]

[linters-settings.gci]
sections = [
  "standard",
  "default",
  "prefix(github.com/gopherjs)",
]
skip-generated = false
custom-order = true
