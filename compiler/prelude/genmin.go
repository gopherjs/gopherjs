// +build ignore

package main

import (
	"fmt"
	"go/build"
	"io/ioutil"
	"log"
	"os/exec"
	"path/filepath"
	"strings"

	"github.com/gopherjs/gopherjs/compiler/prelude"
)

func main() {
	if err := run(); err != nil {
		log.Fatalln(err)
	}
}

func run() error {
	bpkg, err := build.Import("github.com/gopherjs/gopherjs", "", build.FindOnly)
	if err != nil {
		return fmt.Errorf("failed to locate path for github.com/gopherjs/gopherjs/compiler/prelude: %v", err)
	}

	preludeDir := filepath.Join(bpkg.Dir, "compiler", "prelude")

	args := []string{
		filepath.Join(bpkg.Dir, "node_modules", ".bin", "uglifyjs"),
		"--config-file",
		filepath.Join(preludeDir, "uglifyjs_options.json"),
	}
	cmd := exec.Command(args[0], args[1:]...)
	cmd.Stdin = strings.NewReader(prelude.Prelude)

	out, err := cmd.CombinedOutput()
	if err != nil {
		return fmt.Errorf("failed to run %v: %v\n%s", strings.Join(args, " "), err, string(out))
	}

	fn := "prelude_min.go"

	safeOut := strings.Replace(string(out), "`", "\\0060", -1)

	err = ioutil.WriteFile(fn, []byte(`// Code generated by genmin. DO NOT EDIT.

package prelude

// Minified is an uglifyjs-minified version of Prelude
const Minified = `+"`"+safeOut+"`\n"), 0644)

	if err != nil {
		return fmt.Errorf("failed to write to %v: %v", fn, err)
	}

	return nil
}
